// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

package funcs

import (
	"testing"

	"github.com/zclconf/go-cty/cty"
)

func TestJsonSchema(t *testing.T) {
	tests := []struct {
		Description string
		Schema      cty.Value
		JSONDoc     cty.Value
		ShouldPass  bool
	}{
		{
			"jsonschema(userprofile_schema, zloeber_cdituri_userprofiles)",
			cty.StringVal("{\"$id\":\"https://example.com/user-profile.schema.json\",\"$schema\":\"https://json-schema.org/draft/2020-12/schema\",\"description\":\"A representation of a user profile\",\"type\":\"array\",\"items\":{\"type\":\"object\",\"required\":[\"username\",\"email\"],\"properties\":{\"username\":{\"type\":\"string\"},\"email\":{\"type\":\"string\",\"format\":\"email\"},\"fullName\":{\"type\":\"string\"},\"age\":{\"type\":\"integer\",\"minimum\":0},\"location\":{\"type\":\"string\"},\"interests\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}}}}"),
			cty.StringVal("[{\"username\":\"cdituri\",\"email\":\"cdituri@gmail.com\",\"fullName\":\"Chris Dituri\",\"age\":40,\"location\":\"Chicago, IL\",\"interests\":[\"Technology\",\"Music\"]},{\"username\":\"zloeber\",\"email\":\"zlober@gmail.com\",\"fullName\":\"Zachary Loeber\",\"age\":40,\"location\":\"Madison, WI\",\"interests\":[\"Technology\",\"Travel\"]}]"),
			true,
		},
		{
			"jsonschema(taskfile_schema, zloeber_chatgpt_taskfile)",
			cty.StringVal("{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"title\": \"Taskfile YAML Schema\",\n  \"description\": \"Schema for Taskfile files.\",\n  \"definitions\": {\n    \"env\": {\n      \"$ref\": \"#/definitions/vars\"\n    },\n    \"tasks\": {\n      \"type\": \"object\",\n      \"patternProperties\": {\n        \"^.*$\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"array\",\n              \"items\": {\n                \"oneOf\": [\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/definitions/task_call\"\n                  }\n                ]\n              }\n            },\n            {\n              \"$ref\": \"#/definitions/task\"\n            }\n          ]\n        }\n      }\n    },\n    \"task\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"cmds\": {\n          \"description\": \"A list of commands to be executed.\",\n          \"$ref\": \"#/definitions/cmds\"\n        },\n        \"cmd\": {\n          \"description\": \"The command to be executed.\",\n          \"$ref\": \"#/definitions/cmd\"\n        },\n        \"deps\": {\n          \"description\": \"A list of dependencies of this task. Tasks defined here will run in parallel before this task.\",\n          \"$ref\": \"#/definitions/deps\"\n        },\n        \"label\": {\n          \"description\": \"Overrides the name of the task in the output when a task is run. Supports variables.\",\n          \"type\": \"string\"\n        },\n        \"desc\": {\n          \"description\": \"A short description of the task. This is displayed when calling `task --list`.\",\n          \"type\": \"string\"\n        },\n        \"prompt\": {\n          \"description\": \"A prompt that will be presented before a task is run. Declining will cancel running the current and any subsequent tasks.\",\n          \"type\": \"string\"\n        },\n        \"summary\": {\n          \"description\": \"A longer description of the task. This is displayed when calling `task --summary [task]`.\",\n          \"type\": \"string\"\n        },\n        \"aliases\": {\n          \"description\": \"A list of alternative names by which the task can be called.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"sources\": {\n          \"description\": \"A list of sources to check before running this task. Relevant for `checksum` and `timestamp` methods. Can be file paths or star globs.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/glob\"\n          }\n        },\n        \"generates\": {\n          \"description\": \"A list of files meant to be generated by this task. Relevant for `timestamp` method. Can be file paths or star globs.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/glob\"\n          }\n        },\n        \"status\": {\n          \"description\": \"A list of commands to check if this task should run. The task is skipped otherwise. This overrides `method`, `sources` and `generates`.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"preconditions\": {\n          \"description\": \"A list of commands to check if this task should run. If a condition is not met, the task will error.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/precondition\"\n          }\n        },\n        \"dir\": {\n          \"description\": \"The directory in which this task should run. Defaults to the current working directory.\",\n          \"type\": \"string\"\n        },\n        \"set\": {\n          \"description\": \"Enables POSIX shell options for all of a task's commands. See https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/set\"\n          }\n        },\n        \"shopt\": {\n          \"description\": \"Enables Bash shell options for all of a task's commands. See https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/shopt\"\n          }\n        },\n        \"vars\": {\n          \"description\": \"A set of variables that can be used in the task.\",\n          \"$ref\": \"#/definitions/vars\"\n        },\n        \"env\": {\n          \"description\": \"A set of environment variables that will be made available to shell commands.\",\n          \"$ref\": \"#/definitions/env\"\n        },\n        \"dotenv\": {\n          \"description\": \"A list of `.env` file paths to be parsed.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"silent\": {\n          \"description\": \"Hides task name and command from output. The command's output will still be redirected to `STDOUT` and `STDERR`. When combined with the `--list` flag, task descriptions will be hidden.\",\n          \"type\": \"boolean\",\n          \"default\": false\n        },\n        \"interactive\": {\n          \"description\": \"Tells task that the command is interactive.\",\n          \"type\": \"boolean\",\n          \"default\": false\n        },\n        \"internal\": {\n          \"description\": \"Stops a task from being callable on the command line. It will also be omitted from the output when used with `--list`.\",\n          \"type\": \"boolean\",\n          \"default\": false\n        },\n        \"method\": {\n          \"description\": \"Defines which method is used to check the task is up-to-date. `timestamp` will compare the timestamp of the sources and generates files. `checksum` will check the checksum (You probably want to ignore the .task folder in your .gitignore file). `none` skips any validation and always run the task.\",\n          \"type\": \"string\",\n          \"enum\": [\"none\", \"checksum\", \"timestamp\"],\n          \"default\": \"none\"\n        },\n        \"prefix\": {\n          \"description\": \"Defines a string to prefix the output of tasks running in parallel. Only used when the output mode is `prefixed`.\",\n          \"type\": \"string\"\n        },\n        \"ignore_error\": {\n          \"description\": \"Continue execution if errors happen while executing commands.\",\n          \"type\": \"boolean\"\n        },\n        \"run\": {\n          \"description\": \"Specifies whether the task should run again or not if called more than once. Available options: `always`, `once` and `when_changed`.\",\n          \"$ref\": \"#/definitions/run\"\n        },\n        \"platforms\": {\n          \"description\": \"Specifies which platforms the task should be run on.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"requires\": {\n          \"description\": \"A list of variables which should be set if this task is to run, if any of these variables are unset the task will error and not run\",\n          \"$ref\": \"#/definitions/requires_obj\"\n        },\n        \"watch\": {\n          \"description\": \"Configures a task to run in watch mode automatically.\",\n          \"type\": \"boolean\",\n          \"default\": false\n        }\n      }\n    },\n    \"cmds\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/cmd\"\n      }\n    },\n    \"cmd\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"$ref\": \"#/definitions/cmd_call\"\n        },\n        {\n          \"$ref\": \"#/definitions/task_call\"\n        },\n        {\n          \"$ref\": \"#/definitions/defer_call\"\n        },\n        {\n          \"$ref\": \"#/definitions/for_cmds_call\"\n        }\n      ]\n    },\n    \"deps\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"oneOf\": [\n          {\n            \"type\": \"string\"\n          },\n          {\n            \"$ref\": \"#/definitions/task_call\"\n          },\n          {\n            \"$ref\": \"#/definitions/for_deps_call\"\n          }\n        ]\n      }\n    },\n    \"set\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"allexport\",\n        \"a\",\n        \"errexit\",\n        \"e\",\n        \"noexec\",\n        \"n\",\n        \"noglob\",\n        \"f\",\n        \"nounset\",\n        \"u\",\n        \"xtrace\",\n        \"x\",\n        \"pipefail\"\n      ]\n    },\n    \"shopt\": {\n      \"type\": \"string\",\n      \"enum\": [\"expand_aliases\", \"globstar\", \"nullglob\"]\n    },\n    \"vars\": {\n      \"type\": \"object\",\n      \"patternProperties\": {\n        \"^.*$\": {\n          \"anyOf\": [\n            {\n              \"type\": [\"boolean\", \"integer\", \"null\", \"number\", \"string\", \"object\", \"array\"]\n            },\n            {\n              \"$ref\": \"#/definitions/var_subkey\"\n            }\n          ]\n        }\n      }\n    },\n    \"var_subkey\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"sh\": {\n          \"type\": \"string\",\n          \"description\": \"The value will be treated as a command and the output assigned to the variable\"\n        },\n        \"ref\": {\n          \"type\": \"string\",\n          \"description\": \"The value will be used to lookup the value of another variable which will then be assigned to this variable\"\n        },\n        \"map\": {\n          \"type\": \"object\",\n          \"description\": \"The value will be treated as a literal map type and stored in the variable\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"task_call\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"task\": {\n          \"description\": \"Name of the task to run\",\n          \"type\": \"string\"\n        },\n        \"vars\": {\n          \"description\": \"Values passed to the task called\",\n          \"$ref\": \"#/definitions/vars\"\n        },\n        \"silent\": {\n          \"description\": \"Hides task name and command from output. The command's output will still be redirected to `STDOUT` and `STDERR`.\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"required\": [\"task\"]\n    },\n    \"cmd_call\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"cmd\": {\n          \"description\": \"Command to run\",\n          \"type\": \"string\"\n        },\n        \"silent\": {\n          \"description\": \"Silent mode disables echoing of command before Task runs it\",\n          \"type\": \"boolean\"\n        },\n        \"set\": {\n          \"description\": \"Enables POSIX shell options for this command. See https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/set\"\n          }\n        },\n        \"shopt\": {\n          \"description\": \"Enables Bash shell options for this command. See https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/shopt\"\n          }\n        },\n        \"ignore_error\": {\n          \"description\": \"Prevent command from aborting the execution of task even after receiving a status code of 1\",\n          \"type\": \"boolean\"\n        },\n        \"platforms\": {\n          \"description\": \"Specifies which platforms the command should be run on.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false,\n      \"required\": [\"cmd\"]\n    },\n    \"defer_call\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"defer\": {\n          \"description\": \"Run a command when the task completes. This command will run even when the task fails\",\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"object\",\n              \"properties\": {\n                \"task\": {\n                  \"description\": \"Name of the task to defer\",\n                  \"type\": \"string\"\n                }\n              },\n              \"additionalProperties\": false\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false,\n      \"required\": [\"defer\"]\n    },\n    \"for_cmds_call\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"for\": {\n          \"$ref\": \"#/definitions/for\"\n        },\n        \"cmd\": {\n          \"description\": \"Command to run\",\n          \"type\": \"string\"\n        },\n        \"silent\": {\n          \"description\": \"Silent mode disables echoing of command before Task runs it\",\n          \"type\": \"boolean\"\n        },\n        \"task\": {\n          \"description\": \"Task to run\",\n          \"type\": \"string\"\n        },\n        \"vars\": {\n          \"description\": \"Values passed to the task called\",\n          \"$ref\": \"#/definitions/vars\"\n        }\n      },\n      \"oneOf\": [\n        {\"required\": [\"cmd\"]},\n        {\"required\": [\"task\"]}\n      ],\n      \"additionalProperties\": false,\n      \"required\": [\"for\"]\n    },\n    \"for_deps_call\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"for\": {\n          \"$ref\": \"#/definitions/for\"\n        },\n        \"silent\": {\n          \"description\": \"Silent mode disables echoing of command before Task runs it\",\n          \"type\": \"boolean\"\n        },\n        \"task\": {\n          \"description\": \"Task to run\",\n          \"type\": \"string\"\n        },\n        \"vars\": {\n          \"description\": \"Values passed to the task called\",\n          \"$ref\": \"#/definitions/vars\"\n        }\n      },\n      \"oneOf\": [\n        {\"required\": [\"cmd\"]},\n        {\"required\": [\"task\"]}\n      ],\n      \"additionalProperties\": false,\n      \"required\": [\"for\"]\n    },\n    \"for\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/for_list\"\n        },\n        {\n          \"$ref\": \"#/definitions/for_attribute\"\n        },\n        {\n          \"$ref\": \"#/definitions/for_var\"\n        }\n      ]\n    },\n    \"for_list\": {\n      \"description\": \"A list of values to iterate over\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"for_attribute\": {\n      \"description\": \"The task attribute to iterate over\",\n      \"type\": \"string\",\n      \"enum\": [\"sources\"]\n    },\n    \"for_var\": {\n      \"description\": \"Which variables to iterate over. The variable will be split using any whitespace character by default. This can be changed by using the `split` attribute.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"var\": {\n          \"description\": \"Name of the variable to iterate over\",\n          \"type\": \"string\"\n        },\n        \"split\": {\n          \"description\": \"String to split the variable on\",\n          \"type\": \"string\"\n        },\n        \"as\": {\n          \"description\": \"What the loop variable should be named\",\n          \"default\": \"ITEM\",\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"required\": [\"var\"]\n    },\n    \"precondition\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"$ref\": \"#/definitions/precondition_obj\"\n        }\n      ]\n    },\n    \"precondition_obj\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"sh\": {\n          \"description\": \"Command to run. If that command returns 1, the condition will fail\",\n          \"type\": \"string\"\n        },\n        \"msg\": {\n          \"description\": \"Failure message to display when the condition fails\",\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"glob\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"$ref\": \"#/definitions/glob_obj\"\n        }\n      ]\n    },\n    \"glob_obj\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"exclude\": {\n          \"description\": \"File or glob pattern to exclude from the list\",\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"run\": {\n      \"type\": \"string\",\n      \"enum\": [\"always\", \"once\", \"when_changed\"]\n    },\n    \"outputString\": {\n      \"type\": \"string\",\n      \"enum\": [\"interleaved\", \"prefixed\", \"group\"],\n      \"default\": \"interleaved\"\n    },\n    \"outputObject\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"group\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"begin\": {\n              \"type\": \"string\"\n            },\n            \"end\": {\n              \"type\": \"string\"\n            },\n            \"error_only\": {\n              \"description\": \"Swallows command output on zero exit code\",\n              \"type\": \"boolean\",\n              \"default\": false\n            }\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"requires_obj\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"vars\": {\n          \"description\": \"List of variables that must be defined for the task to run\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"allOf\": [\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"version\": {\n          \"description\": \"Specify the Taskfile format that this file conforms to.\",\n          \"oneOf\": [\n            {\n              \"type\": \"string\",\n              \"pattern\": \"^(0|[1-9]\\\\d*)(?:\\\\.(0|[1-9]\\\\d*))?(?:\\\\.(0|[1-9]\\\\d*))?(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\\\+([0-9a-zA-Z-]+(?:\\\\.[0-9a-zA-Z-]+)*))?$\"\n            },\n            {\n              \"type\": \"number\",\n              \"enum\": [3]\n            }\n          ]\n        },\n        \"output\": {\n          \"description\": \"Defines how the STDOUT and STDERR are printed when running tasks in parallel. The interleaved output prints lines in real time (default). The group output will print the entire output of a command once, after it finishes, so you won't have live feedback for commands that take a long time to run. The prefix output will prefix every line printed by a command with [task-name] as the prefix, but you can customize the prefix for a command with the prefix: attribute.\",\n          \"anyOf\": [\n            { \"$ref\": \"#/definitions/outputString\" },\n            { \"$ref\": \"#/definitions/outputObject\" }\n          ]\n        },\n        \"method\": {\n          \"description\": \"Defines which method is used to check the task is up-to-date. (default: checksum)\",\n          \"type\": \"string\",\n          \"enum\": [\"none\", \"checksum\", \"timestamp\"],\n          \"default\": \"checksum\"\n        },\n        \"includes\": {\n          \"description\": \"Imports tasks from the specified taskfiles. The tasks described in the given Taskfiles will be available with the informed namespace.\",\n          \"type\": \"object\",\n          \"patternProperties\": {\n            \"^.*$\": {\n              \"anyOf\": [\n                {\n                  \"type\": \"string\"\n                },\n                {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"taskfile\": {\n                      \"description\": \"The path for the Taskfile or directory to be included. If a directory, Task will look for files named `Taskfile.yml` or `Taskfile.yaml` inside that directory. If a relative path, resolved relative to the directory containing the including Taskfile.\",\n                      \"type\": \"string\"\n                    },\n                    \"dir\": {\n                      \"description\": \"The working directory of the included tasks when run.\",\n                      \"type\": \"string\"\n                    },\n                    \"optional\": {\n                      \"description\": \"If `true`, no errors will be thrown if the specified file does not exist.\",\n                      \"type\": \"boolean\"\n                    },\n                    \"flatten\": {\n                      \"description\": \"If `true`, the tasks from the included Taskfile will be available in the including Taskfile without a namespace. If a task with the same name already exists in the including Taskfile, an error will be thrown.\",\n                      \"type\": \"boolean\"\n                    },\n                    \"internal\": {\n                      \"description\": \"Stops any task in the included Taskfile from being callable on the command line. These commands will also be omitted from the output when used with `--list`.\",\n                      \"type\": \"boolean\"\n                    },\n                    \"aliases\": {\n                      \"description\": \"Alternative names for the namespace of the included Taskfile.\",\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"vars\": {\n                      \"description\": \"A set of variables to apply to the included Taskfile.\",\n                      \"$ref\": \"#/definitions/vars\"\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        },\n        \"vars\": {\n          \"description\": \"A set of global variables.\",\n          \"$ref\": \"#/definitions/vars\"\n        },\n        \"env\": {\n          \"description\": \"A set of global environment variables.\",\n          \"$ref\": \"#/definitions/env\"\n        },\n        \"tasks\": {\n          \"description\": \"A set of task definitions.\",\n          \"$ref\": \"#/definitions/tasks\"\n        },\n        \"silent\": {\n          \"description\": \"Default 'silent' options for this Taskfile. If `false`, can be overridden with `true` in a task by task basis.\",\n          \"type\": \"boolean\"\n        },\n        \"set\": {\n          \"description\": \"Enables POSIX shell options for all commands in the Taskfile. See https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/set\"\n          }\n        },\n        \"shopt\": {\n          \"description\": \"Enables Bash shell options for all commands in the Taskfile. See https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html\",\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/shopt\"\n          }\n        },\n        \"dotenv\": {\n          \"type\": \"array\",\n          \"description\": \"A list of `.env` file paths to be parsed.\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"run\": {\n          \"description\": \"Default 'run' option for this Taskfile. Available options: `always`, `once` and `when_changed`.\",\n          \"$ref\": \"#/definitions/run\"\n        },\n        \"interval\": {\n          \"description\": \"Sets a different watch interval when using `--watch`, the default being 5 seconds. This string should be a valid Go duration: https://pkg.go.dev/time#ParseDuration.\",\n          \"type\": \"string\",\n          \"pattern\": \"^[0-9]+(?:m|s|ms)$\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"required\": [\"version\"],\n      \"anyOf\": [\n        {\n          \"required\": [\"includes\"]\n        },\n        {\n          \"required\": [\"tasks\"]\n        },\n        {\n          \"required\": [\"includes\", \"tasks\"]\n        }\n      ]\n    }\n  ]\n}\n"),
			cty.StringVal("{\n    \"version\": \"3\",\n    \"silent\": true,\n    \"vars\": {\n        \"aiac_path\": \"{{.LOCAL_BIN_PATH}}/aiac\",\n        \"OPENAI_API_KEY\": {\n            \"sh\": \"echo \"\n        }\n    },\n    \"tasks\": {\n        \"show\": {\n            \"desc\": \"Show variables\",\n            \"cmds\": [\n                \"echo \\\"aiac_path: {{.aiac_path}}\\\"\\necho \\\"ROOT_PATH: {{.ROOT_DIR}}\\\"\\necho \\\"LOCAL_BIN_PATH: {{.LOCAL_BIN_PATH}}\\\"\\necho \\\"OPENAI_API_KEY: {{.OPENAI_API_KEY}}\\\"\\n\"\n            ]\n        },\n        \"install\": {\n            \"desc\": \"Install aiac\",\n            \"cmds\": [\n                \"cd /tmp\",\n                \"wget https://github.com/gofireflyio/aiac/releases/download/v1.0.0/aiac_1.0.0_Linux-64bit.tar.gz\",\n                \"tar -zxvf ./aiac_1.0.0_Linux-64bit.tar.gz\",\n                \"cp aiac {{.aiac_path}}\"\n            ],\n            \"status\": [\n                \"test -f {{.aiac_path}}\"\n            ]\n        }\n    }\n}"),
			true,
		},
	}

	for _, test := range tests {
		t.Run(test.Description, func(t *testing.T) {
			got, err := JSONSchema(test.Schema, test.JSONDoc)

			if !test.ShouldPass {
				if err == nil {
					t.Fatal("The JSON document matched the JSON Scheam; wanted error")
				}
				return
			} else if err != nil {
				t.Fatalf("unexpected error: %s", err)
			}

			if got.RawEquals(cty.BoolVal(test.ShouldPass)) {
				return
			} else {
				t.Fatal("Could not parse the `jsonschema` cty.Value return-value into a boolean")
			}
		})
	}
}
